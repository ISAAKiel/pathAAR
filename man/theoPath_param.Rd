% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theoPath.R
\name{theoPath_param}
\alias{theoPath_param}
\title{theoPath_param}
\usage{
theoPath_param(ras_ai, ras_para, con, method, theta, p, type = "c")
}
\arguments{
\item{ras_ai}{RasterLayer, raster with elevation values}

\item{ras_para}{RasterLayer, raster with additionalvalues (visibility, friction costs, etc.)}

\item{con}{data.frame, connections of a Delaunay triangulation as a result of function theo_del or your own method}

\item{method}{chr, either "walk_i" for pedestrians or "drive_i" for vehicles. For further informations look up the respective functions}

\item{theta}{numeric, parameter controls randomisation of walk. Lower values equal more exploration of the walker around the shortest path, while if theta approaches zero the walk becomes totally random}

\item{p}{numeric, buffer zone around rWalk rasters, used in loop}

\item{type}{chr, either "c" (default) for least-cost distances or "r" for random walks. As stated by J. van Etten, there is no analytical way as of now to decide for intermediate values of theta which type should be choosed. For further informations see ?gdistance::geoCorrection}
}
\value{
List, two RasterLayer with values of summed up expectations of single rWalk connections. The item param with 0.1x the influence of the supplied parameter and param_1000 with 100x the influence of the supplied parameter and 10x the value of theta.
}
\description{
Theoretical Paths using cost functions defined by Herzog 2012 with additional cost parameter
}
\details{
If there are no actual parts of a path network known, the `theoPath_herzog_param` function can be used to reconstruct pathways based on randomised shortest paths connecting known regions with higher densities of sites, e.g. monuments. An underlying cost surface is created by using the cost functions defined by I. Herzog (2012) either for walking or driving. By supplying an additional parameter (visibility, friction costs, etc.), hypotheses on the influence of different variables can be tested. This function is a useful step in the evaluation of reconstructed paths.
}
\examples{

set.seed(123)

# Creating random test data 
testmatrix <- data.frame(
 x = abs(rnorm(100)*50), 
 y = abs(rnorm(100)*50))

maxima <- localMax(testmatrix, r=15)

# Setting geographical frame
xmin    <- 0
xmax    <- max(testmatrix$x)
ymin    <- 0
ymax    <- max(testmatrix$y)
ext_ai <- extent(xmin, xmax, ymin, ymax)

# Coordinates used to set frame corner for definition of the aspect ratio
sv <- (xmax-xmin)/(ymax-ymin)
rw     <- 5   # width of raster defined in m

# Definition of frame expansion and defining frame                              
colums <- round((xmax-xmin)/rw, 0) + 1                                     
v <- cbind(1:(colums*rows))                                              
df <- data.frame(v)                                                         
gt      <- sp::GridTopology(c(xmin, ymin), c(rw, rw), c(colums, rows))
sgdf    <- sp::SpatialGridDataFrame(gt, df)

# Initialising observation window for theoretical connections
win <- owin(c(xmin, xmax),c(ymin, ymax))

# calculating theoretical connections via delaunay triangulation
theo_con <- theo_del(maxima,win)

# Setting up an artificial elevation map with random values
emap <- sgdf
emap@data$v <- sample((50:56), length(emap@data$v), replace=T)
ras_emap <- raster(emap)

# Friction Raster for Prefering lowlands:
para <- ras_sgdf
para@data@values[which(para@data@values <0 )] <- 0
para@data@values <- para@data@values/ max(para@data@values)
plot(para)

# Run the function with chosen parameters for method, theta and p
theo_run <- theoPath_param(ras_ai=ras_emap, ras_para=para, method="drive_i",theo_con[[1]], theta=0.001, p=5, type="r")

}
\author{
Franziska Faupel <\email{ffaupel@ufg.uni-kiel.de}>

Oliver Nakoinz <\email{oliver.nakoinz.i@gmail.com}>

Hendrik Raese <\email{h.raese@ufg.uni-kiel.de}>
}
